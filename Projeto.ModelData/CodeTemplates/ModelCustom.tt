<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ assembly name="System.Core" #>
<#@ import namespace = "System.Resources" #> 
<#@ Import namespace = "System.Linq" #>
<#@ Import namespace = "System.Text" #>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".txt"#><#

	DeleteOldOutputs();
#>

<#

List<string> edmx = LocalizarEDMX();

string dirDestino = string.Empty;
string refnamespaceMetaData = string.Empty;

foreach (var item in edmx)
{
   
	EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
	CodeGenerationTools code = new CodeGenerationTools(this);
	MetadataLoader loader = new MetadataLoader(this);
	var ef = new MetadataTools(this);
	var textTransform = DynamicTextTransformation.Create(this);
	var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
	var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

	EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(item);
	EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();

	string namespaceName = namespaceApplicacao(suffixMetadata(), item, suffixNameSpace());
	refnamespaceMetaData = namespaceName;
	string referenciaMetadataDefaut = string.Empty;
	string entityname = container.Name;
	
	dirDestino = folderMetaData(item);
	
	foreach (EntityType entity in 
				ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
	{
		string fileName = entity.Name+suffixMetadata() +".cs";
	
		if (!DoesFileExist(fileName))
		{ 
			WriteHeader(fileManager, referenciaMetadataDefaut);
	        fileManager.StartNewFile(fileName);
			BeginNamespace(namespaceName, code);

#>
using System; 
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

/// <summary>
/// <#=code.Escape(entity)#> class MetaData
/// </summary>
<#= Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=code.Escape(entity)+ suffixMetadata()#>
{
<#
    foreach (EdmProperty edmProperty in entity.Properties.Where(p => 
              p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
#>
<#    
        WriteDisplayName(edmProperty);
        WriteRequiredAttribute(edmProperty);
        WriteStringLengthAttribute(edmProperty);
#>
    <#=Accessibility.ForProperty(edmProperty)#> <#=code.Escape(edmProperty.TypeUsage)#> <#=code.Escape(edmProperty)#> { <#=Accessibility.ForGetter(edmProperty)#>get; <#=Accessibility.ForSetter(edmProperty)#>set; }

<#        
    }
#>
}
<#
			EndNamespace(namespaceName);
        }
		else
		{
			fileManager.StartNewFile(fileName);
			this.Write(OutputFile(fileName));
		}
    }

	fileManager.Process();	
	
	copiarArquivosDiretorio(dirDestino);
}
#>
}

<#
	DeleteOldOutputs();
#>

<#

foreach (var item in edmx)
{

	EntityFrameworkTemplateFileManager fileManagerModelResult = EntityFrameworkTemplateFileManager.Create(this);
	CodeGenerationTools code = new CodeGenerationTools(this);
	MetadataLoader loader = new MetadataLoader(this);
	var ef = new MetadataTools(this);
	EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(item);
	var textTransform = DynamicTextTransformation.Create(this);

	string referenciaMetadata = namespaceApplicacao(suffixMetadata(), item, suffixRef());

	
	string referenciaMetadataDefaut = namespaceApplicacao(suffixMetadata(), item, suffixRefDefaut());

	if (!string.IsNullOrWhiteSpace(referenciaMetadataDefaut))
	{
		 referenciaMetadataDefaut = "using "+namespaceApplicacao(suffixMetadata(), item, suffixRefDefaut())+";";
	}

	string namespaceName = namespaceApplicacao(suffixModel(), item, suffixNameSpace());


	dirDestino = folderModel(item);

	EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
	
	string entityname = container.Name;
	
	var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
	
	var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
	
	foreach (ComplexType entity in ItemCollection.GetItems<ComplexType>().OrderBy(e => e.Name))
	{
		// Nome da classe de anotação Exemplo - Categoria + DataApplicator +.cs
		string fileName = entity.Name +".cs";

	
		if (!DoesFileExist(fileName))
		{ 
			//Cabeçalho do arquivo
			WriteHeader(fileManagerModelResult, referenciaMetadataDefaut);

	    	// Criar o arquivo
	        fileManagerModelResult.StartNewFile(fileName);

			// Adicionar namespaces no arquivo
			BeginNamespace(namespaceName, code);

			var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(entity);

#>
using System; 
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

/// <summary>
/// <#=code.Escape(entity)#> class ModelData
/// </summary>
<#=Accessibility.ForType(entity)#> partial class <#=code.Escape(entity)#>
{

	public <#=code.Escape(entity)#>()
    {
<#
#>
    }

<#
    // Loop em cada propriedade primitiva da entidade
    foreach (EdmProperty edmProperty in entity.Properties.Where(p => 
              p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
#>
<#    
#>
    <#=Accessibility.ForProperty(edmProperty)#> <#=code.Escape(edmProperty.TypeUsage)#> <#=code.Escape(edmProperty)#> { <#=Accessibility.ForGetter(edmProperty)#>get; <#=Accessibility.ForSetter(edmProperty)#>set; }
<#        
    }
#>
}
<#
			EndNamespace(namespaceName);
        }
		else
		{
			// Escrever com arquivo original
			fileManagerModelResult.StartNewFile(fileName);
			this.Write(OutputFile(fileName));
		}
    }
	fileManagerModelResult.Process();	

	copiarArquivosDiretorio(dirDestino);
}

#>

<#
	DeleteOldOutputs();
#>

<#
foreach (var item in edmx)
{

	EntityFrameworkTemplateFileManager fileManagerModel = EntityFrameworkTemplateFileManager.Create(this);
	CodeGenerationTools code = new CodeGenerationTools(this);
	MetadataLoader loader = new MetadataLoader(this);
	var ef = new MetadataTools(this);
	EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(item);
	var textTransform = DynamicTextTransformation.Create(this);

	string referenciaMetadata = refnamespaceMetaData;
   
	
	string referenciaMetadataDefaut = namespaceApplicacao(suffixMetadata(), item, suffixRefDefaut());

	if (!string.IsNullOrWhiteSpace(referenciaMetadataDefaut))
	{
		 referenciaMetadataDefaut = "using "+namespaceApplicacao(suffixMetadata(), item, suffixRefDefaut())+";";
	}

	string namespaceName = namespaceApplicacao(suffixModel(), item, suffixNameSpace());


	dirDestino = folderModel(item);

	EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
	
	string entityname = container.Name;
	
	var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
	
	var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
	
	foreach (EntityType entity in 
				ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
	{
		// Nome da classe de anotação Exemplo - Categoria + DataApplicator +.cs
		string fileName = entity.Name +".cs";

	
		if (!DoesFileExist(fileName))
		{ 
			//Cabeçalho do arquivo
			WriteHeader(fileManagerModel, referenciaMetadataDefaut);

	    	// Criar o arquivo
	        fileManagerModel.StartNewFile(fileName);

			// Adicionar namespaces no arquivo
			BeginNamespace(namespaceName, code);

			var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(entity);
			var collectionNavigationProperties = typeMapper.GetCollectionNavigationProperties(entity);
			var complexProperties = typeMapper.GetComplexProperties(entity);

#>
using System; 
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
<# if (!string.IsNullOrWhiteSpace(referenciaMetadata))
{#>
using <#=referenciaMetadata#>;
<#}#>

[Serializable]
[MetadataType(typeof(<#=code.Escape(entity)+suffixMetadata()#>))]

/// <summary>
/// <#=code.Escape(entity)#> class ModelData
/// </summary>
<#= Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=code.Escape(entity)#>
{

	public <#=code.Escape(entity)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }

        foreach (var navigationProperty in collectionNavigationProperties)
        {
#>
        this.<#=code.Escape(navigationProperty)#> = new HashSet<<#=typeMapper.GetTypeName(navigationProperty.ToEndMember.GetEntityType())#>>();
<#
        }

        foreach (var complexProperty in complexProperties)
        {
#>
        this.<#=code.Escape(complexProperty)#> = new <#=typeMapper.GetTypeName(complexProperty.TypeUsage)#>();
<#
        }
#>
    }

<#
    // Loop em cada propriedade primitiva da entidade
    foreach (EdmProperty edmProperty in entity.Properties.Where(p => 
              p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
#>
<#    
#>
    <#=Accessibility.ForProperty(edmProperty)#> <#=code.Escape(edmProperty.TypeUsage)#> <#=code.Escape(edmProperty)#> { <#=Accessibility.ForGetter(edmProperty)#>get; <#=Accessibility.ForSetter(edmProperty)#>set; }
<#        
    }

    var navigationProperties = typeMapper.GetNavigationProperties(entity);
    if (navigationProperties.Any())
    {
#>

<#
        foreach (var navigationProperty in navigationProperties)
        {
#>
    <#=codeStringGenerator.NavigationProperty(navigationProperty)#>
<#
        }
    }

#>
}
<#
			EndNamespace(namespaceName);
        }
		else
		{
			// Escrever com arquivo original
			fileManagerModel.StartNewFile(fileName);
			this.Write(OutputFile(fileName));
		}
    }
	fileManagerModel.Process();	

	copiarArquivosDiretorio(dirDestino);
}

#>

<#
	DeleteOldOutputs();

EntityFrameworkTemplateFileManager fileManagerDefaut= EntityFrameworkTemplateFileManager.Create(this);
CodeGenerationTools codeDefaut = new CodeGenerationTools(this);
fileManagerDefaut.StartNewFile("ModelCustom.txt");
fileManagerDefaut.Process();	

#>


<#+

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}


// Adicionar namespace
void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    // Instancia classe do tipo region
    CodeRegion region = new CodeRegion(this);

    // Verifica valor namespace 
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>

namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        // Adiciona parágrafo 
        PushIndent(CodeRegion.GetIndent(1));
    }
}

// Escreva o nome de exibição anotação de dados
void WriteDisplayName(EdmProperty edmProperty) 
{
    string displayName = edmProperty.Name;
    if (!string.IsNullOrEmpty(displayName)) 
    {
        displayName = GetFriendlyName(edmProperty.Name);
        string displayAttribute = string.Format("[DisplayName(\"{0}\")]", displayName);
#>
    <#=displayAttribute#>
<#+
    }
}


//adicionar atributo obrigatório
void WriteRequiredAttribute(EdmProperty edmProperty) {
    
    if (!edmProperty.Nullable) 
    {
      WriteLine("{0}[Required(ErrorMessage = \"{1} is required\")]",
         CodeRegion.GetIndent(1),GetFriendlyName(edmProperty.Name));
    }
}



// Escrever tamanho máximo campo
void WriteStringLengthAttribute(EdmProperty edmProperty) { 
    
    Facet maxLengthfacet;
    
    if (edmProperty.TypeUsage.Facets.TryGetValue("MaxLength", true, out maxLengthfacet)) 
    {
        double lengthAttribute;
        
        if (double.TryParse(maxLengthfacet.Value.ToString(), out lengthAttribute)) 
        {
            WriteLine("{0}[MaxLength({1}, ErrorMessage = \"{2} cannot " + 
              "be longer than {1} characters\")]",
              CodeRegion.GetIndent(1),lengthAttribute,GetFriendlyName(edmProperty.Name));
        }
    }
}

// Obter outro nome da propriedade 
string GetFriendlyName(string value)
{
return Regex.Replace(value,
            "([A-Z]+)", " $1",
            RegexOptions.Compiled).Trim();
}



// inicializar cabeçalho
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, string referenciaMetadataDefaut, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#=referenciaMetadataDefaut#>
<#+ 
    fileManager.EndBlock();
}

System.Resources.ResourceManager _resourceManager;

string GetResourceString(string resourceName)
{
	if(_resourceManager == null)
	{
		_resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
	}
	
    return _resourceManager.GetString(resourceName, null);
}


private static readonly Lazy<System.Resources.ResourceManager> ResourceManager =
    new Lazy<System.Resources.ResourceManager>(
        () => new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(MetadataItemCollectionFactory).Assembly), isThreadSafe: true);



public static string GetResourceStringModel(string resourceName)
{
    ArgumentNotNull(resourceName, "resourceName");

    return ResourceManager.Value.GetString(resourceName, null);
}




// Recebe o conteúdo do nome do arquivo
string OutputFile(string filename)
{
     using(StreamReader sr =  new StreamReader(Path.Combine(GetCurrentDirectory(),filename)))     
    {
        return sr.ReadToEnd();
    }
}

string namespaceApplicacao(string suffix, string Edmx, string tipo)
{

	string refer = string.Empty;
	string[] list = this.Host.ResolveParameterValue("-", "-", "projects").Split('|');
	string validarSolution = list.GetValue(0).ToString().Split('.').GetValue(0).ToString();
	string[] listEdmx = Edmx.Split('\\');
	int valorNameSpace = listEdmx.Count(x => validarSolution.Contains(x));

	int posicao = 0;
   	foreach (string s in list)
	{
		if ( Edmx.LastIndexOf(s) > 0)
		{
		   posicao = Edmx.LastIndexOf(s);
 		   refer =  s;
        }
	}
	int posicaofinal = Edmx.Length -  posicao;
    refer = Edmx.Substring(posicao,  posicaofinal).Replace("\\","."); 
	
	if (!String.IsNullOrWhiteSpace(suffix))
	{
		if (suffix==suffixModel()){

			posicao = refer.LastIndexOf("."+suffixModel());
			refer= refer.Substring(0,posicao)+"."+suffixModel();
         
        }
		else
        { 
			if (tipo == suffixRef() || tipo == suffixRefDefaut())
			{
				if (valorNameSpace<=1)
				{
					posicao = refer.LastIndexOf("."+suffixModel());
					
					refer= refer.Substring(0,posicao)+"."+suffixMetadata();
					
					if (tipo == suffixRef())
					{
						refer = string.Empty;
					}
				}
				else
				{
					refer =  validarSolution+"."+suffixMetadata();
					if (tipo == suffixRefDefaut())
                    {
						refer = string.Empty;
					}
				}
			
			}
			else
			{
					posicao = refer.LastIndexOf("."+suffixModel());
					refer= refer.Substring(0,posicao)+"."+suffixMetadata();
            }
		}
    }
	return refer;
}


string pathArquivo(string arquivo)
{
  return System.IO.Path.GetDirectoryName(arquivo);
}

List<string> LocalizarEDMX()
{

	var dir = new DirectoryInfo(Host.ResolvePath("..\\..")).FullName;

	var listEdmx =  new  List<string>(); 

	string[] folders = System.IO.Directory.GetDirectories(dir,"*.", System.IO.SearchOption.AllDirectories); 
	
	foreach (string f in folders)
	{
		DirectoryInfo diSource = new DirectoryInfo(f);	   
		foreach (FileInfo item in diSource.GetFiles())
		{
			if (item.Extension.Equals(".edmx"))
			{
				listEdmx.Add(item.FullName);
			}
		}
	}
	validarDiretorio(listEdmx);
	return listEdmx;
} 

string suffixMetadata()
{
		return "MetaData";
}
string suffixModel()
{
	return "Model";
}

string suffixRef()
{
	return "Ref";
}

string suffixRefDefaut()
{
	return "RefDefaut";
}
string suffixNameSpace()
{
	return "NameSpace";
}


string folderModel(string s)
{     
	return pathArquivo(s);
}


string folderMetaData(string s)
{     
	string nomedir = pathArquivo(s);
    int posicaoInicial = nomedir.LastIndexOf(suffixModel());
	return nomedir= nomedir.Substring(0,posicaoInicial-1)+"\\"+suffixMetadata();
}

void validarDiretorio(List<string> edmx)
{
	foreach (string s in edmx)
	{
		if (!System.IO.Directory.Exists(folderMetaData(s)));
		{
			 System.IO.Directory.CreateDirectory(folderMetaData(s));
		}
    }
}



// Verifica se existe o arquivo
bool DoesFileExist(string filename)
{     
    return File.Exists(Path.Combine(System.IO.Path.GetDirectoryName(Host.TemplateFile),filename));    
}

string GetCurrentDirectory()
{
	return System.IO.Path.GetDirectoryName(Host.TemplateFile);
}


void  DeleteOldOutputs()
{
	DirectoryInfo diSource = new DirectoryInfo(System.IO.Path.GetDirectoryName(Host.TemplateFile));	   
	foreach (FileInfo item in diSource.GetFiles())
	{
		if (item.Extension.Equals(".cs"))
		{
			item.Delete();
		}
	}
}

void copiarArquivosDiretorio(string destino)
{
	
	DirectoryInfo diSource = new DirectoryInfo(System.IO.Path.GetDirectoryName(Host.TemplateFile));	   
	foreach (FileInfo item in diSource.GetFiles())
	{
		if (item.Extension.Equals(".cs"))
		{
			if (!File.Exists(Path.Combine(destino,item.Name)))
			{
				System.IO.File.Copy (item.FullName, Path.Combine(destino,item.Name));			
            }
		}
	}
}

public static void ArgumentNotNull<T>(T arg, string name) where T : class
{
    if (arg == null)
    {
        throw new ArgumentNullException(name);
    }
}
 

public const string TemplateId = "CSharp_DbContext_Types_EF5";

public class CodeStringGenerator
{
    private readonly CodeGenerationTools _code;
    private readonly TypeMapper _typeMapper;
    private readonly MetadataTools _ef;

    public CodeStringGenerator(CodeGenerationTools code, TypeMapper typeMapper, MetadataTools ef)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(typeMapper, "typeMapper");
        ArgumentNotNull(ef, "ef");

        _code = code;
        _typeMapper = typeMapper;
        _ef = ef;
    }

    public string Property(EdmProperty edmProperty)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            Accessibility.ForProperty(edmProperty),
            _typeMapper.GetTypeName(edmProperty.TypeUsage),
            _code.Escape(edmProperty),
            _code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
            _code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
    }

    public string NavigationProperty(NavigationProperty navigationProperty)
    {
        var endType = _typeMapper.GetTypeName(navigationProperty.ToEndMember.GetEntityType());
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            AccessibilityAndVirtual(Accessibility.ForProperty(navigationProperty)),
            navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ICollection<" + endType + ">") : endType,
            _code.Escape(navigationProperty),
            _code.SpaceAfter(Accessibility.ForGetter(navigationProperty)),
            _code.SpaceAfter(Accessibility.ForSetter(navigationProperty)));
    }
    
    public string AccessibilityAndVirtual(string accessibility)
    {
        return accessibility + (accessibility != "private" ? " virtual" : "");
    }
    
    public string EntityClassOpening(EntityType entity)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1}partial class {2}{3}",
            Accessibility.ForType(entity),
            _code.SpaceAfter(_code.AbstractOption(entity)),
            _code.Escape(entity),
            _code.StringBefore(" : ", _typeMapper.GetTypeName(entity.BaseType)));
    }
    
    public string EnumOpening(SimpleType enumType)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} enum {1} : {2}",
            Accessibility.ForType(enumType),
            _code.Escape(enumType),
            _code.Escape(_typeMapper.UnderlyingClrType(enumType)));
        }
    
    public void WriteFunctionParameters(EdmFunction edmFunction, Action<string, string, string, string> writeParameter)
    {
        var parameters = FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
        foreach (var parameter in parameters.Where(p => p.NeedsLocalVariable))
        {
            var isNotNull = parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null";
            var notNullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", " + parameter.FunctionParameterName + ")";
            var nullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", typeof(" + parameter.RawClrTypeName + "))";
            writeParameter(parameter.LocalVariableName, isNotNull, notNullInit, nullInit);
        }
    }
    
    public string ComposableFunctionMethod(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} IQueryable<{1}> {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            _code.Escape(edmFunction),
            string.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray()));
    }
    
    public string ComposableCreateQuery(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<{0}>(\"[{1}].[{2}]({3})\"{4});",
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            edmFunction.NamespaceName,
            edmFunction.Name,
            string.Join(", ", parameters.Select(p => "@" + p.EsqlParameterName).ToArray()),
            _code.StringBefore(", ", string.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray())));
    }
    
    public string FunctionMethod(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var paramList = String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
        if (includeMergeOption)
        {
            paramList = _code.StringAfter(paramList, ", ") + "MergeOption mergeOption";
        }

        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            returnType == null ? "int" : "ObjectResult<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            _code.Escape(edmFunction),
            paramList);
    }
    
    public string ExecuteFunction(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var callParams = _code.StringBefore(", ", String.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()));
        if (includeMergeOption)
        {
            callParams = ", mergeOption" + callParams;
        }
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction{0}(\"{1}\"{2});",
            returnType == null ? "" : "<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            edmFunction.Name,
            callParams);
    }
    
    public string DbSet(EntitySet entitySet)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} DbSet<{1}> {2} {{ get; set; }}",
            Accessibility.ForReadOnlyProperty(entitySet),
            _typeMapper.GetTypeName(entitySet.ElementType),
            _code.Escape(entitySet));
    }

    public string UsingDirectives(bool inHeader, bool includeCollections = true)
    {
        return inHeader == string.IsNullOrEmpty(_code.VsNamespaceSuggestion())
            ? string.Format(
                CultureInfo.InvariantCulture,
                "{0}using System;{1}" +
                "{2}",
                inHeader ? Environment.NewLine : "",
                includeCollections ? (Environment.NewLine + "using System.Collections.Generic;") : "",
                inHeader ? "" : Environment.NewLine)
            : "";
    }
}

 

public class TypeMapper
{
    private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";

    private readonly System.Collections.IList _errors;
    private readonly CodeGenerationTools _code;
    private readonly MetadataTools _ef;

    public TypeMapper(CodeGenerationTools code, MetadataTools ef, System.Collections.IList errors)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(ef, "ef");
        ArgumentNotNull(errors, "errors");

        _code = code;
        _ef = ef;
        _errors = errors;
    }

    public string GetTypeName(TypeUsage typeUsage)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
    }

    public string GetTypeName(EdmType edmType)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: null);
    }

    public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
    }

    public string GetTypeName(EdmType edmType, string modelNamespace)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
    }

    public string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
    {
        if (edmType == null)
        {
            return null;
        }

        var collectionType = edmType as CollectionType;
        if (collectionType != null)
        {
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
        }

        var typeName = _code.Escape(edmType.MetadataProperties
                                .Where(p => p.Name == ExternalTypeNameAttributeName)
                                .Select(p => (string)p.Value)
                                .FirstOrDefault())
            ?? (modelNamespace != null && edmType.NamespaceName != modelNamespace ?
                _code.CreateFullName(_code.EscapeNamespace(edmType.NamespaceName), _code.Escape(edmType)) :
                _code.Escape(edmType));

        if (edmType is StructuralType)
        {
            return typeName;
        }

        if (edmType is SimpleType)
        {
            var clrType = UnderlyingClrType(edmType);
            if (!IsEnumType(edmType))
            {
                typeName = _code.Escape(clrType);
            }

            return clrType.IsValueType && isNullable == true ?
                String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
                typeName;
        }

        throw new ArgumentException("edmType");
    }
    
    public Type UnderlyingClrType(EdmType edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        var primitiveType = edmType as PrimitiveType;
        if (primitiveType != null)
        {
            return primitiveType.ClrEquivalentType;
        }

        if (IsEnumType(edmType))
        {
            return GetEnumUnderlyingType(edmType).ClrEquivalentType;
        }

        return typeof(object);
    }
    
    public object GetEnumMemberValue(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var valueProperty = enumMember.GetType().GetProperty("Value");
        return valueProperty == null ? null : valueProperty.GetValue(enumMember, null);
    }
    
    public string GetEnumMemberName(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var nameProperty = enumMember.GetType().GetProperty("Name");
        return nameProperty == null ? null : (string)nameProperty.GetValue(enumMember, null);
    }

    public System.Collections.IEnumerable GetEnumMembers(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        var membersProperty = enumType.GetType().GetProperty("Members");
        return membersProperty != null 
            ? (System.Collections.IEnumerable)membersProperty.GetValue(enumType, null)
            : Enumerable.Empty<MetadataItem>();
    }
    
    public bool EnumIsFlags(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");
        
        var isFlagsProperty = enumType.GetType().GetProperty("IsFlags");
        return isFlagsProperty != null && (bool)isFlagsProperty.GetValue(enumType, null);
    }

    public bool IsEnumType(GlobalItem edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        return edmType.GetType().Name == "EnumType";
    }

    public PrimitiveType GetEnumUnderlyingType(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        return (PrimitiveType)enumType.GetType().GetProperty("UnderlyingType").GetValue(enumType, null);
    }

    public string CreateLiteral(object value)
    {
        if (value == null || value.GetType() != typeof(TimeSpan))
        {
            return _code.CreateLiteral(value);
        }

        return string.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})", ((TimeSpan)value).Ticks);
    }
    
    public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
    {
        ArgumentNotNull(types, "types");
        ArgumentNotNull(sourceFile, "sourceFile");
        
        var hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
        if (types.Any(item => !hash.Add(item)))
        {
            _errors.Add(
                new CompilerError(sourceFile, -1, -1, "6023",
                    String.Format(CultureInfo.CurrentCulture, GetResourceStringModel("Template_CaseInsensitiveTypeConflict"))));
            return false;
        }
        return true;
    }
    
    public IEnumerable<SimpleType> GetEnumItemsToGenerate(IEnumerable<GlobalItem> itemCollection)
    {
        return GetItemsToGenerate<SimpleType>(itemCollection)
            .Where(e => IsEnumType(e));
    }
    
    public IEnumerable<T> GetItemsToGenerate<T>(IEnumerable<GlobalItem> itemCollection) where T: EdmType
    {
        return itemCollection
            .OfType<T>()
            .Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName))
            .OrderBy(i => i.Name);
    }

    public IEnumerable<string> GetAllGlobalItems(IEnumerable<GlobalItem> itemCollection)
    {
        return itemCollection
            .Where(i => i is EntityType || i is ComplexType || i is EntityContainer || IsEnumType(i))
            .Select(g => GetGlobalItemName(g));
    }

    public string GetGlobalItemName(GlobalItem item)
    {
        if (item is EdmType)
        {
            return ((EdmType)item).Name;
        }
        else
        {
            return ((EntityContainer)item).Name;
        }
    }

    public IEnumerable<EdmProperty> GetSimpleProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetSimpleProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }

    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }
    
    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }

    public IEnumerable<NavigationProperty> GetNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type);
    }
    
    public IEnumerable<NavigationProperty> GetCollectionNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    }
    
    public FunctionParameter GetReturnParameter(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var returnParamsProperty = edmFunction.GetType().GetProperty("ReturnParameters");
        return returnParamsProperty == null
            ? edmFunction.ReturnParameter
            : ((IEnumerable<FunctionParameter>)returnParamsProperty.GetValue(edmFunction, null)).FirstOrDefault();
    }

    public bool IsComposable(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var isComposableProperty = edmFunction.GetType().GetProperty("IsComposableAttribute");
        return isComposableProperty != null && (bool)isComposableProperty.GetValue(edmFunction, null);
    }

    public IEnumerable<FunctionImportParameter> GetParameters(EdmFunction edmFunction)
    {
        return FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
    }

    public TypeUsage GetReturnType(EdmFunction edmFunction)
    {
        var returnParam = GetReturnParameter(edmFunction);
        return returnParam == null ? null : _ef.GetElementType(returnParam.TypeUsage);
    }
    
    public bool GenerateMergeOptionFunction(EdmFunction edmFunction, bool includeMergeOption)
    {
        var returnType = GetReturnType(edmFunction);
        return !includeMergeOption && returnType != null && returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType;
    }
}

public class EdmMetadataLoader
{
    private readonly IDynamicHost _host;
    private readonly System.Collections.IList _errors;

    public EdmMetadataLoader(IDynamicHost host, System.Collections.IList errors)
    {
        ArgumentNotNull(host, "host");
        ArgumentNotNull(errors, "errors");

        _host = host;
        _errors = errors;
    }

    public IEnumerable<GlobalItem> CreateEdmItemCollection(string sourcePath)
    {
        ArgumentNotNull(sourcePath, "sourcePath");

        if (!ValidateInputPath(sourcePath))
        {
            return new EdmItemCollection();
        }

        var schemaElement = LoadRootElement(_host.ResolvePath(sourcePath));
        if (schemaElement != null)
        {
            using (var reader = schemaElement.CreateReader())
            {
                IList<EdmSchemaError> errors;
                var itemCollection = MetadataItemCollectionFactory.CreateEdmItemCollection(new[] { reader }, out errors);

                ProcessErrors(errors, sourcePath);

                return itemCollection;
            }
        }
        return new EdmItemCollection();
    }

    public string GetModelNamespace(string sourcePath)
    {
        ArgumentNotNull(sourcePath, "sourcePath");

        if (!ValidateInputPath(sourcePath))
        {
            return string.Empty;
        }

        var model = LoadRootElement(_host.ResolvePath(sourcePath));
        if (model == null)
        {
            return string.Empty;
        }

        var attribute = model.Attribute("Namespace");
        return attribute != null ? attribute.Value : "";
    }

    private bool ValidateInputPath(string sourcePath)
    {
        if (sourcePath == "$" + "edmxInputFile" + "$")
        {
            _errors.Add(
                new CompilerError(_host.TemplateFile ?? sourcePath, 0, 0, string.Empty,
                    GetResourceStringModel("Template_ReplaceVsItemTemplateToken")));
            return false;
        }

        return true;
    }

    public XElement LoadRootElement(string sourcePath)
    {
        ArgumentNotNull(sourcePath, "sourcePath");

        var root = XElement.Load(sourcePath, LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);
        return root.Elements()
            .Where(e => e.Name.LocalName == "Runtime")
            .Elements()
            .Where(e => e.Name.LocalName == "ConceptualModels")
            .Elements()
            .Where(e => e.Name.LocalName == "Schema")
            .FirstOrDefault()
                ?? root;
    }

    private void ProcessErrors(IEnumerable<EdmSchemaError> errors, string sourceFilePath)
    {
        foreach (var error in errors)
        {
            _errors.Add(
                new CompilerError(
                    error.SchemaLocation ?? sourceFilePath,
                    error.Line,
                    error.Column,
                    error.ErrorCode.ToString(CultureInfo.InvariantCulture),
                    error.Message)
                {
                    IsWarning = error.Severity == EdmSchemaErrorSeverity.Warning
                });
        }
    }
    
    public bool IsLazyLoadingEnabled(EntityContainer container)
    {
        string lazyLoadingAttributeValue;
        var lazyLoadingAttributeName = MetadataConstants.EDM_ANNOTATION_09_02 + ":LazyLoadingEnabled";
        bool isLazyLoading;
        return !MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, out lazyLoadingAttributeValue)
            || !bool.TryParse(lazyLoadingAttributeValue, out isLazyLoading)
            || isLazyLoading;
    }
}

#>
